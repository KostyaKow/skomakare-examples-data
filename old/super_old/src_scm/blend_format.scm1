(load "gio.scm")
(load "utils.scm")
(load "db.scm")

(define blend-file (filename->ptr "untitled.blend"))
(define blend-ptr  (pointer-reader blend-file))

(define ptr-size   0)

(define blend-db (database))
(define sdna-db  (database))


(define (make-struct type fields) (cons type fields))
(define (struct-type   struct) (car struct))
(define (struct-fields struct) (cdr struct))

(define (make-field type name)   (list type name))
(define (field-type field)  (car field))
(define (field-name field)  (cadr field))

(define (print-field field)
  (p "\t" (field-type field) "  " (field-name field) ";\n"))

(define (print-struct struct)
  (p "struct " (struct-type struct) " {\n")
  (for-each (lambda (field)
	      (print-field field))
	    (struct-fields struct))
  (p "};\n\n"))

;format takes 1 arg, and returns either 'stat-bad, 'stat-ok or pretty-printed value. If format returns 'stat-bad, an error is called, but if it returns 'stat-ok the execution continues, but pretty-printed value is not added to database.
(define (read&store ptr type type-size num db name-in-db format)
  (define raw
    (if (eq? num 'elem)
	(ptr 'next type type-size)
	(ptr 'arr num type type-size)))

  (define db-entry raw) ;stuff we're gonna to store
  (let ((fmt (assert (format raw))))
    (when (not (eq? 'stat-ok fmt))
      (set! db-entry (list fmt raw))))
  (db 'add name-in-db db-entry)
  db-entry)

(define (parse-header)
  (define (next size name-in-db format)
        (read&store blend-ptr 'str size 'elem blend-db name-in-db format))

  (next 7 'id
    (lambda (str)
      (if (string=? str "BLENDER") 'stat-ok 'stat-bad)))
  (set! ptr-size (car
  (next 1 'ptr-size
    (lambda (str)
      (cond ((string=? str "_") 4)
	    ((string=? str "-") 8)
	    (else 'stat-bad))))))
  (next 1 'endianness
    (lambda (str)
      (cond ((string=? str "v") "little")
            ((string=? str "V") "big")
            (else 'stat-bad))))
  (next 3 'version stat-ok-f))


(define (read-blk)
  (define blk-db (database))
  (define (next size type name-in-db)
    (read&store blend-ptr type size 'elem blk-db name-in-db stat-ok-f))

                                         (define blk-name
  (next 4        'str 'name))            (define blk-size
  (next 4        'int 'size))
  (next ptr-size 'int 'old-ptr)
  (next 4        'int 'sdna-index)
  (next 4        'int 'count-struct)
  (next blk-size 'ptr 'blk-content)
  blk-db)

(define (read-blocks)
  (define blocks '())

  (define (rec)
    (let ((blk (read-blk)))
      (set! blocks (cons blk blocks))
      (if (string=? (blk 'name) "ENDB")
	blocks
	(rec))))
  (blend-db 'add 'blocks (rec))
  'ok)

(define (parse-sdna)
  (define sdna-block-db (car (filter (lambda (x) (string=? "DNA1" (x 'name))) (blend-db 'blocks))))

  (define sdna-ptr (pointer-reader (car (sdna-block-db 'blk-content))))
  ;(p "\nptr of size: " (cdr sdna-ptr) " has value " (car sdna-ptr) "\n")

  (define (next type size name-in-db num)
    (read&store sdna-ptr type size (if (= num 1) 'elem num) sdna-db name-in-db stat-ok-f))

  (define structs '())
  (define num-names 0) (define num-types 0) (define num-strcs 0)
  (next 'str  4 'id          1)                                 ;SDNA
  (next 'str  4 'name-id     1)          (set! num-names        ;NAME
  (next 'int  4 'num-names   1))
  (next 'str  0 'names*      num-names)  (sdna-ptr 'skip 3) ;wtf? how does this even work...
  (next 'str  4 'type-id     1)          (set! num-types        ;TYPE
  (next 'int  4 'num-types   1))
  (next 'str  0 'types*      num-types)  (sdna-ptr 'skip 3)
  (next 'str  4 'tlen-id     1)                                ;TLEN
  (next 'uint 2 'tlens       num-types)  ;(sdna-ptr 'skip 3)
  (next 'str  4 'strc-id     1)          (set! num-strcs       ;STRC
  (next 'int  4 'num-strcs   1))

  (sdna-db 'add 'names
	   (reverse
	   (map (lambda (str)
		  (string-drop-right str 1))
		(sdna-db 'names*))))

  (sdna-db 'add 'types
	   (reverse
	   (map (lambda (str)
		  (string-drop-right str 1))
		(sdna-db 'types*))))

  (repeat num-strcs
	  (lambda x
	    (define struct-type (sdna-ptr 'next 'uint 2))
	    (define num-fields  (sdna-ptr 'next 'uint 2))
	    (define fields '())
	    (define struct (make-struct struct-type fields))

	    (repeat num-fields
		    (lambda x
		      (define field-type (sdna-ptr 'next 'uint 2))
		      (define field-name (sdna-ptr 'next 'uint 2))
		      (define field (make-field field-type field-name))
		      (set! fields (cons field fields))))

	    (let ((struct (make-struct struct-type fields)))
	      (set! structs (cons struct structs)))))

  (sdna-db 'add 'structs-i structs)
  'ok)

;sdna-db 'structs-indexes - ((type-index (field-type-index field-name-index)))
;sdna-db 'structs-strings - ((type-str   (field-type-str   field-name-str)))
(define (sdna-index-to-string)
  (define names (sdna-db 'names))
  (define types (sdna-db 'types))
  (define structs-s '())

  (for-each (lambda (struct-i)
	      (define struct-type-s (list-ref types (struct-type struct-i)))
	      (define fields-s '())

	      (for-each (lambda (field-i)
			  (define field-type-s (list-ref types (field-type field-i)))
			  (define field-name-s (list-ref names (field-name field-i)))
			  (define field-s (make-field field-type-s field-name-s))
			  (set! fields-s (cons field-s fields-s)))
			(struct-fields struct-i))
	      (let ((struct-s (make-struct struct-type-s fields-s)))
		(set! structs-s (cons struct-s structs-s))))
	    (sdna-db 'structs-i))

  (sdna-db 'add 'structs-s structs-s)
  'ok)


(define (get-sdna-by-type-index type)
  (search (sdna-db 'structs-i)
	  (lambda (x) (= (struct-type x) type))))

(define (get-sdna-by-type-string type)
  (search (sdna-db 'structs-s)
	  (lambda (x) (string=? (struct-type x) type))))


(define (read-sdna sdna blk-ptr)
  (define struct-db (database))
  (define type (struct-type sdna))

  (define (read sdna type name count)
    (when (= count 0) (set! count 1))
    (cond ((eq? type 'ptr) (blk-ptr 'arr count 'ptr 8))
	  ((null? sdna) (blk-ptr 'arr type 0))
	  (else (let ((lst '()))
		  (repeat
		   count
		   (lambda x (set! lst (cons (read-sdna sdna blk-ptr) lst))))
		  lst))))

  (define (store name stuff count)
    (when (= count 0)
      (set! count 1)
      (set! stuff (car stuff)))

    (struct-db 'add name stuff))

  (for-each 
   (lambda (field)
     (let* ((fname (field-name field))
	    (ftype (field-type field))
	    (fsdna (get-sdna-by-type-string type))
	    (regex (sm ".+?\\[([0-9]+)\\]" fname)))
       (if regex
	   (let* ((range   (vector-ref regex 2))
		  (str-num (substring fname (car range) (cdr range)))
		  (num     (string->number str-num))
		  (data    (read fsdna ftype fname num)))
	     (store fname data num))
	   (let  ((data    (read fsdna ftype fname 0)))
	     (store fname data 0)))))

   (struct-fields sdna))
  struct-db)

(define (parse-blocks)
  (for-each
   (lambda (block)
     (define ptr  (pointer-reader (car (block 'blk-content))))
     (define sdna (list-ref (sdna-db 'structs-s) (block 'sdna-index)))
     (if (= (block 'sdna-index) 0)
	 'ok
	 (begin (sdna-db 'add
			 (string->symbol (string-append (block 'name) " "))
			 (read-sdna sdna ptr)))
		))
	 ;(p "error no sdna-index " (block 'name) "\n")
	 ;(p "block " (block 'name) " has sdna " (car sdna) "\n")
   (blend-db 'blocks)))
	   ;(flatten-sdna))))))

(define (start)
  (parse-header)
  (read-blocks)
  (parse-sdna)
  (sdna-index-to-string)
  (parse-blocks)
  )

(start)


(define (print-structs)
  (for-each (lambda (struct) (print-struct struct))
	    (sdna-db 'structs-s)))

(define (print-dna)
  (p (sdna-db 'id) "\n")
  (p (sdna-db 'name-id) ": " (sdna-db 'num-names) "\n")
  (p (sdna-db 'type-id) ": " (sdna-db 'num-types) "\n")
  (p (sdna-db 'tlen-id) ": " (sdna-db 'tlens)     "\n")
  (p (sdna-db 'strc-id) ": " (sdna-db 'num-strcs) "\n")
  ;(apply p (sdna-db 'names))     (newline)
  ;(apply p (sdna-db 'types))     (newline)
  ;(apply p (sdna-db 'tlens))     (newline)
  ;(apply p (sdna-db 'strcts))    (newline)
  )

(define (print-header)
  (print (blend-db 'id))                   (newline)
  (print-seps "\t" (blend-db 'ptr-size))   (newline)
  (print-seps "\t" (blend-db 'endianness)) (newline)
  (print (blend-db 'version))              (newline))


